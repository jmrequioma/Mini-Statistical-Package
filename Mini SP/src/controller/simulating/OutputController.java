package controller.simulating;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;
import main.MainFields3;
import main.SimpleRandom;
import main.Systematic;
import main.Stratified;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import main.Data;
import javafx.event.ActionEvent;

public class OutputController {
	@FXML
	private TextField txtFInput;
	@FXML
	private Button btnConfirm;
	@FXML
	private Button btnFinish;
	@FXML
	private TextArea txtADisplay;
	final float DEFAULT_PERCENTAGE = 0.2f;

	// Event Listener on Button[#btnConfirm].onAction
	@FXML
	public void btnConfirmClick(ActionEvent event) {
		// TODO Autogenerated
		try {
			String samplingTechnique = MainFields3.getSamplingTechnique();
			List<Data> samplingFrame = MainFields3.getSamplingFrame();
			String dataType = MainFields3.getDataType();
			int sampleSize = Integer.valueOf(txtFInput.getText());
			
			if (samplingTechnique.equals("Simple Random Sampling")) {
				if (!sampleSizeOutOfBounds(sampleSize, samplingFrame) && sampleSize != 0) {
					SimpleRandom simpleRandom = new SimpleRandom(samplingFrame, samplingFrame.size(), sampleSize);
					List<Data> randomSample = simpleRandom.getRandom();
					txtADisplay.clear();
					for (Data data : randomSample) {
						if (dataType.equals("Integer")) {
							txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataInteger() + "} ");
						} else {
							txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataCharacter() + "} ");
						}
					}
				} else {
					Alert alert = new Alert(AlertType.ERROR);
					alert.setTitle("Critical Error");
					alert.setHeaderText("Invalid Input!!!");
					alert.setContentText("Ooops, input is not allowed! Please change the input.");
					alert.showAndWait();
				}
			} else if (samplingTechnique.equals("Systematic Sampling")) {
				if(!sampleSizeOutOfBounds(sampleSize, samplingFrame) && sampleSize > 1) {
					Systematic systematic = new Systematic(samplingFrame, samplingFrame.size(), sampleSize);
					List<Data> randomSample = systematic.getRandom();
					txtADisplay.clear();
					for (Data data : randomSample) {
						if (dataType.equals("Integer")) {
							txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataInteger() + "} ");
						} else {
							txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataCharacter() + "} ");
						}
					}
				} else {
					Alert alert = new Alert(AlertType.ERROR);
					alert.setTitle("Critical Error");
					alert.setHeaderText("Invalid Input!!!");
					alert.setContentText("Ooops, input is not allowed! Please change the input.");
					alert.showAndWait();
				}
			} else if (samplingTechnique.equals("Stratified Sampling")) {
				/*
				final int sampleSizePercent = sampleSize;
				final int sampleSize2 = (int) Math.ceil(samplingFrame.size() * (sampleSizePercent / (float) 100));
				if(sampleSizePercent > 0 && sampleSize2 < samplingFrame.size()) {
					Stratified stratified = new Stratified(samplingFrame, samplingFrame.size(), sampleSizePercent, dataType);
					List<List<Data>> randomSample = stratified.getRandom();
					int strataNum = 1;
					txtADisplay.clear();
					for(List<Data> strata: randomSample) {
						txtADisplay.appendText("Strata No: " + strataNum + " (" + strata.size() +
													   " total sample items)");
						//appendNewLine(2);
						//display(strata);
						//appendNewLine(2);
						//appendDivider();
						//appendNewLine(2);
						strataNum++;
					}
				}
				*/
				
				// sampleSize is referred to as sampleSizePercent
				if(sampleSize > 0 && sampleSize < 100) { 
					Stratified stratified = new Stratified(samplingFrame, samplingFrame.size(), sampleSize, dataType);
					List<List<Data>> randomData = stratified.getRandom();
					displayStratas(randomData);
				} else {
					Alert alert = new Alert(AlertType.ERROR);
					alert.setTitle("Critical Error");
					alert.setHeaderText("Invalid Input!!!");
					alert.setContentText("Ooops, input is not allowed! Please change the input.");
					alert.showAndWait();
				}
			}
			
		} catch (NumberFormatException nfe) {
			if (txtFInput.getText().equals("")) {
				String samplingTechnique = MainFields3.getSamplingTechnique();
				List<Data> samplingFrame = MainFields3.getSamplingFrame();
				String dataType = MainFields3.getDataType();
				int sampleSize = (int) Math.ceil((DEFAULT_PERCENTAGE * samplingFrame.size()));
				if (samplingTechnique.equals("Simple Random Sampling")) {
					if (!sampleSizeOutOfBounds(sampleSize, samplingFrame) && sampleSize != 0) {
						SimpleRandom simpleRandom = new SimpleRandom(samplingFrame, samplingFrame.size(), sampleSize);
						List<Data> randomSample = simpleRandom.getRandom();
						txtADisplay.clear();
						for (Data data : randomSample) {
							if (dataType.equals("Integer")) {
								txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataInteger() + "} ");
							} else {
								txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataCharacter() + "} ");
							}
						}
					} else {
						Alert alert = new Alert(AlertType.ERROR);
						alert.setTitle("Critical Error");
						alert.setHeaderText("Invalid Input!!!");
						alert.setContentText("Ooops, input is not allowed! Please change the input.");
						alert.showAndWait();
					}
				} else if (samplingTechnique.equals("Systematic Sampling")) {
					if(!sampleSizeOutOfBounds(sampleSize, samplingFrame) && sampleSize > 1) {
						Systematic systematic = new Systematic(samplingFrame, samplingFrame.size(), sampleSize);
						List<Data> randomSample = systematic.getRandom();
						txtADisplay.clear();
						for (Data data : randomSample) {
							if (dataType.equals("Integer")) {
								txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataInteger() + "} ");
							} else {
								txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataCharacter() + "} ");
							}
						}
					} else {
						Alert alert = new Alert(AlertType.ERROR);
						alert.setTitle("Critical Error");
						alert.setHeaderText("Invalid Input!!!");
						alert.setContentText("Ooops, input is not allowed! Please change the input.");
						alert.showAndWait();
					}
				}
			} else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Critical Error");
				alert.setHeaderText("Invalid Input!!!");
				alert.setContentText("Ooops, input is not allowed! Please change the input.");
				alert.showAndWait();
			}
		}
		
	}
	
	private void displayStratas(List<List<Data>> stratas) {
		for(int i = 0; i < stratas.size(); i++) {
			txtADisplay.appendText("Strata No. " + (i + 1) + "\n");
		
			for (Data data : stratas.get(i)) {
				if (MainFields3.getDataType().equals("Integer")) {
					txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataInteger() + "} ");
				} else {
					txtADisplay.appendText("{Index: " + (data.getIndex() + 1) + " ; Data: " + data.getDataCharacter() + "} ");
				}
			}
			
			txtADisplay.appendText("\n\n----------------------------------------------------------------------------------------------------------------\n\n");
		}
	}
	
	@FXML
	public void btnFinishClick(ActionEvent event) throws IOException {
		MainFields3.clearSamplingFrame();
		Parent root = FXMLLoader.load(getClass().getResource("/view/simulating/Menu.fxml"));
		Stage stage = (Stage) btnFinish.getScene().getWindow();
		stage.setTitle("Choices");
		stage.setResizable(false);
		Scene scene = new Scene(root);
		scene.getStylesheets().add("/theme/bloodcrimson.css");
		stage.setScene(scene);
		stage.show();
	}
	
	private boolean sampleSizeOutOfBounds(int sampleSizeInt, List<Data> samplingFrame) {
		return sampleSizeInt >= samplingFrame.size();
	}
}
